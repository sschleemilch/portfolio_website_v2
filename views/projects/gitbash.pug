extends ../include/projects

block variables
  - var projects_gitbash_active=true
  - var projects_active=true

block projects_content
  section(class="section")
    div(class="content has-text-centered")
      a(class="button" href="https://github.com/sschleemilch/gitbash-powerline" data-augmented-ui="bl-clip tr-clip")
        span(class="icon")
          i(class="fab fa-github")
        span Sources

    div(class="container")
      div(class="lb is-primary augment-caption" data-augmented-ui="tl-clip tr-2-clip-x br-clip bl-clip both")
        p(class="lb-caption") Warning
        br
        |  Note that this project is deprecated and there exists a follow up project rewritten in C++.
        |  The reason for rewriting are performance reasons.
        br
        | Since I am working professionally with quite large repositories, I did switch
        |  to a more efficient implementation using the 
        a(href="https://libgit2.org/") libgit2
        |  that results in a way faster information gathering
        | that is also faster that a high level 
        code git status
        |  call.
        br
        |  You can find the source code of course as well in github 
        a(href="https://github.com/sschleemilch/cpp-gitbash-powerline")
          | here.

      hr(class="top" data-augmented-ui="tl-clip tr-clip border")
      h1(class="title") ABOUT
      h2(class="subtitle") What this project is about
      div(class="content")
        | This little project is about developing an own customizable Git Bash Powerline application (Or to be fair just an eye candy extension but not only as we will see). As most of you might know, Git is a powerful and well known source code
        | management tool to version software sources also for large scaling teams. If you do not know already about Git itself, I would suggest reading either the official 
        a(href="https://git-scm.com/") documentation 
        | or one of the many tutorials out there. By default, if you install Git from 
        a(href="https://git-scm.com/downloads") here 
        | it will look similar to this:
        div(class="has-text-centered")
          img(src="/images/git_bash_vanilla.png" alt="Git:Bash:Vanilla" width="500" height="339")
        | The out of the box experience using the Git Bash command line is very good. It uses 
        |
        a(href="https://mintty.github.io/") Mintty 
        | which is again based on 
        a(href="http://cygwin.com/") Cygwin. 
        | Therefore, inside the Git Bash you will have
        | basic command line features out of the Linux world bundled with a Git specific prompt
        | that will show you basic Git information (like the current branch).
        br
        br
        | This Git Bash prompt is very customizable in color and in terms of which information will be shown there. 
        | Still it was not quite enough for me. I was aiming for full control what and how Git information will be shown there. 
        | Although there are a lot of GUI clients out there, most of the time I switch back to the maybe "old-school" way on the command-line.
        | Of course, GUIs have also their upsides, especially when you need to keep track of a lot of branches in your project and need to filter,
        | highlight certain branches or if you want to investigate the past log. Good GUIs I can recommend are:
        ul
          li
            a(href="http://www.syntevo.com/smartgit/") SmartGit
          li
            a(href="https://www.gitkraken.com/") GitKraken
          li
            a(href="https://git-scm.com/docs/gitk") GitK 
            | (is shipped with the Git installation itself)
          li
            a(href="https://www.sourcetreeapp.com/") SourceTree
        | The list is far away from being complete. If you do prefer using a GUI, you could stop
        | reading here. However, if you are interested in building your own Git Bash Prompt extension or just want to use mine, please keep reading. 
        | To give the reader a little preview, the result will look like this (for modified files on the "master" branch):
        br
        br
        div(class="has-text-centered")
          img(src="/images/git_bash_preview.png" alt="Git:Bash:Preview" width="500" height="202")
        | This preview only shows a small part of the features that are currently implemented.
      hr
      h1(class="title") Manipulating the Git Bash Prompt
      h2(class="subtitle") .bashrc, .minttyrc, C#
      div(class="content")
        | To be able to create your own Git Bash Prompt line, one needs to know how to manipulate the prompt string that is displayed after each
        | command put into the Git Bash. The key for that is the
        code .bashrc
        | file. This file will be loaded on a Git Bash spawn, meaning
        | while opening a new Git Bash instance. It might not exist on a fresh installation though. The
        code bash.exe
        | has a built in
        | 
        code bashrc
        | that defines the default behavior you will have out of the box and can be found in your installation path
        | (e.g.
        code C:\Program Files\Git\etc\bash.bashrc
        |). The bash will also look in your home directory for an user defined
        | file 
        code .bashrc
        | .
        br
        br
        | Normally, the home directory will be something like
        code C:\Users\USER
        |. You can verify this by
        | typing 
        code echo $HOME
        | in a Git Bash session. If this directory does not yet contain a
        code .bashrc
        |, create it.
        | There, you can manipulate the variable
        code PS1
        | to change the prompt string to any string you want.
        | See
        a(href="https://wiki.ubuntuusers.de/Bash/Prompt/") here
        | for a good reference how you can style the prompt in general 
        | using escape sequences. Additionally, the built in Git information are stored in the variable
        code __git_ps1
        |. 
        | So to just style the built in information, you can use this variable and escape sequences to adapt the colors to your needs.
        br
        br
        | Like explained in the first section, we do want to extract those information by ourself.
        | So we need to inject a program call to manipulate
        code PS1
        | after each prompt command.
        | We can do this by adding the following lines to the
        code .bashrc
        |:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | function _update_ps1() {
            |   PS1="$(path/to/gitbash-powerline.exe $? 2> /dev/null)"
            | }
            | 
            | if [ "$TERM" != "linux" ]; then
            |   PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
            | fi
        | This way, after every command that was executed out of the Git Bash, the program
        | 
        code 
          | program.exe
        | will be called and its return string will be stored in 
        code 
          | PS1program.exe
        | and therefore displayed. The program being called could of course be also other programs or scripts (e.g. a Python script). Keep in mind that it is a good idea to specify
        | the absolute path to the program here and not a relative one like I did in the example since your current working directory can of course change. Additionally, it could make sense to display whether the last command succeeded or not. If you wish to display that information, you need to forward the return code of the last command to your script/program. It can be accessed with 
        code 
          | $?program.exe
        |. Also you might not be
        | interested in displaying error channel information out of your program, so that
        | adding a pipe to null makes sense by adding 
        code 
          | 2> /dev/nullprogram.exe
        | in the end.
        br
        br
        | Regarding the style of your Git Bash window you also have the possibility to adapt
        | the color scheme for it. You can do that in the Git Bash configuration GUI itself or adapt the configuration file for it, the 
        code 
          | .minttyrcprogram.exe
        |. If you wish to use
        | special symbols, it might be a good choice to install additional fonts that are able
        | to display those kind of symbols (e.g "DejaVu Sans Mono for Powerline"). 
        br
        br
        | The actual implementation language is totally up to you, I decided to use 
        a(href="https://docs.microsoft.com/de-de/dotnet/csharp/")
          | C# 
        | since I only plan to
        | use this extension on Windows and it might be faster than a scripting language like Python.
        br
        br
        | In the next section, I will go through parts of my implementation to show how
        | to extract Git information effectively.
      hr
      h1(class="title") Program Structure
      div(class="content")
        | I decided to use an object orientated way of programming the behavior.
        | While developing the following files including one class each came out of it:
        ul
          li
            a(href="https://github.com/sschleemilch/gitbash-powerline/blob/master/gitbash-powerline/Program.cs")
              code
                | Program.cs 
            | defines the actual behavior of which sections
            | to print on which prompt position.
          li
            a(href="https://github.com/sschleemilch/gitbash-powerline/blob/master/gitbash-powerline/BashColor.cs")
              code
                | BashColors.cs
            | abstracts the printing of colors by
            | providing function interfaces to print colored strings with defined enums for
            | each color.
          li
            a(href="https://github.com/sschleemilch/gitbash-powerline/blob/master/gitbash-powerline/UnicodeSymbols.cs")
              code
                | UnicodeSymbols.cs
            | abstracts the symbols to be printed by assigning 
            | unicode characters to enums
          li
            a(href="https://github.com/sschleemilch/gitbash-powerline/blob/master/gitbash-powerline/GitRepo.cs")
              code 
                | GitRepo.cs
            | capsules the model of the current Git repository
            | the user might have navigated into. As a constructor, it needs the current
            | working directory to extract the information from
        code
          | Program.cs
        | is meant to be quite simple and understandable.
        | I won't get into greater detail about the actual code here but rather pointing out some of the Git plumbing commands which I used to extract the relevant information.
        | The only behavior that is implemented until now that does not have to do anything with Git
        | is displaying the current working directory and replacing the home directory string with a
        code
          | ~ 
        | string. Also it will cut the string once it gets too long to still provide 
        | a compact prompt line.
      hr
      h1(class="title")
        | Relevant Git repository states
      div(class="content")
        | So what are the relevant information we are interested in as a developer? This list was extended a few times since once you are familiar with Git, as a developer or Git repository maintainer you really
        | appreciate every bit of information you don't have to get by typing the git commands yourself. Currently, the following information will be evaluated:
        ul
            li 
              | Branch name/Commit ID
            li 
              | Whether the current branch has an upstream counterpart and if yes, how many commits the
              | upstream counterpart is ahead/behind
            li 
              | Whether you have modified 
              strong 
                | tracked
              |  files or not
            li 
              | Whether you have staged files or not
            li 
              | Whether you are currently in a merge state or not
            li 
              | Whether you have 
              strong
                | untracked 
              | files which are not in any 
              code 
                | .gitignore
              | or not
            li 
              | Whether you have 
              strong
                | untracked 
              | files which are in a
              code
                | .gitignore 
              |  or not
        | Those information should also be displayed correctly for submodules.
      hr
      h1(class="title")
        | Git Commands
      div(class="content")
        | I will now go through the mentioned relevant Git repository states and how to extract the desired information.
      h1(class="title is-4") Git Repository?
      div(class="content")
        | One of the first thing that we need to assure before trying to extract Git repository information is whether the
        | current directory is a Git repository or not. Also for future commands it is useful to know where the current
        | repository root is.
        | This can be done with the following command:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git rev-parse --show-toplevel
        | The command will return a non-zero exit code in case of the current working directory not being a Git repository.
        | Otherwise it returns the absolute path to the Git repository root.
      h1(class="title is-4") Branch name/Commit ID
      div(class="content")
        | One could say that this information is one of the most important ones when working with several branches
        | and submodules to prevent commiting unintentionally on wrong branches or detached HEAD states.
        | Depending on the state you are currently on, this information could be a real branch name or a commit ID in cases of
        | specific checkouts or when navigating into submodule directories.
        br
        | The easiest way of getting this information I have found so far is:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git symbolic-ref HEAD
        | This call will return a non-zero value in case of being not on a branch's HEAD. Otherwise it will return the branch
        | name with a a prefix
        code refs/heads/ 
        | that can be replaced with an empty string to leave the raw branch name.
        | In case of a non-zero return value we need to invoke another Git command to get the commit ID
        | (if we do want to display that information).
        | The following command will print the current commit ID where HEAD is pointing to:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git rev-parse HEAD
      h1(class="title is-4") Branch upstream information
      div(class="content")
        | Unless you are creating branches on the fly locally, you will have an upstream branch. And if not, it might be a valuable information to display with the following command that will return zero in case of a present upstream counterpart and a non-zero value otherwise:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git rev-parse --abbrev-ref --symbolic-full-name @{u}
        | In case of the branch having an upstream branch, we can then examine how many commits the local branch is ahead/behind. The following command will print two values. The first one will be the number of commits the local branch is
        | ahead and the second number the number of commits the local branch is behind. Therefore, we need a postprocessing step
        | to parse this output string and extract those numbers. A simple regular expression like
        code "(\d+)\s*(\d+)"
        | is enough.
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git rev-list --left-right --count
      h1(class="title is-4") Modified/Staged files
      div(class="content")
        | Also a very basic and useful information is whether you have modified any file that is already tracked. 
        | The following command 
        strong without
        code --quiet
        | would list all files that have been
        | modified. Since I decided to be only interested if there are any modified files at all, I am using the 
        | quiet option that won't display anything but will return zero in case of no modified files.
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git diff-files --quiet
        | If you are interested in files that have been staged already, the command is slightly different but again
        | provides the quiet option not to print them:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git diff-files --quiet --cached
        | Files should also be of interest if they are not in one of your ignore list and therefore might be considered 
        | to be added:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git ls-files --exclude-staandard --others
        | The command does not provide the quiet option and therefore we need to analyze the output of the command.
        | If the output is an empty string, there are none.
        | Last but not least, it might be of interest if there are files present that are in your ignore list, such 
        | as build artifacts or IDE configuration files you do not want to track. That might be useful if you want to do a clean build and therefore this information would be visible directly in the prompt:
        pre(data-augmented-ui="tl-clip tr-clip bl-clip br-clip")
          code
            | git ls-files --exclude-staandard --others --ignored     
      hr
      h1(class="title") Showcase
      h2(class="subtitle") How information representation looks like
      div(class="content")
        table(class="table")
          thead
            tr
              th Feature
              th Example Picture
          tbody
            tr
              th Everything clean
              th
                img(src="/images/gitbash_all_clean.png" alt="Gitbash:All Clean")
            tr
              th Behind + Ahead
              th
                img(src="/images/gitbash_behind_and_ahead.png" alt="Gitbash:Behind and Ahead")
            tr
              th Detached Head
              th
                img(src="/images/gitbash_detached_head.png" alt="Gitbash:Detached Head")
            tr
              th Ignored Files present
              th
                img(src="/images/gitbash_ignored_files.png" alt="Gitbash:Ignored Files Present")
            tr
              th In Merge State
              th
                img(src="/images/gitbash_in_merge.png" alt="Gitbash:In Merge State")
            tr
              th No Upstream Branch
              th
                img(src="/images/gitbash_no_upstream.png" alt="Gitbash:No Upstream Branch")
            tr
              th Staged files
              th
                img(src="/images/gitbash_staged_files.png" alt="Gitbash:Staged Files Present")
            tr
              th Untracked files
              th
                img(src="/images/gitbash_untracked_files.png" alt="Gitbash:Untracked Files Present")
            tr
              th Untracked and Staged
              th
                img(src="/images/gitbash_untracked_and_staged.png" alt="Gitbash:Untracked and Unstaged Files Present")
            tr
              th Detached Head and Files Staged
              th
                img(src="/images/gitbash_detached_head_staged.png" alt="Gitbash:Detached Head and Files Staged")
      hr(class="bottom" data-augmented-ui="bl-clip br-clip border")